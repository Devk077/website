# Generated by Django 5.0.3 on 2024-03-07 00:11

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BodyComposition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Patient_name",
                    models.CharField(
                        default="", max_length=100, verbose_name="Patient Name"
                    ),
                ),
                ("height", models.FloatField(verbose_name="Height (m)")),
                ("weight", models.FloatField(verbose_name="Weight (kg)")),
                ("body_fat", models.FloatField(verbose_name="Body Fat (%)")),
                ("age", models.PositiveIntegerField(verbose_name="Age")),
                ("BMI", models.FloatField(verbose_name="Body Mass Index")),
                (
                    "RMR",
                    models.FloatField(verbose_name="Resting Metabolic Rate (kcal/day)"),
                ),
                (
                    "visceral_fat",
                    models.PositiveIntegerField(verbose_name="Visceral Fat"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Food",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "calories",
                    models.PositiveIntegerField(verbose_name="Calories (Kcals)"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MealPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "short_description",
                    models.TextField(
                        blank=True,
                        default="",
                        null=True,
                        verbose_name="Short Description",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator("^\\d{1,10}$")
                        ],
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, default="", max_length=100, null=True
                    ),
                ),
                (
                    "occupation",
                    models.CharField(blank=True, default="", max_length=100, null=True),
                ),
                ("address", models.TextField(blank=True, default="", null=True)),
                ("age", models.PositiveIntegerField(default=0)),
                ("sex", models.CharField(default="other", max_length=10)),
                ("marital_status", models.CharField(default="single", max_length=20)),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default="",
                        max_digits=5,
                        null=True,
                        verbose_name="Weight (kg)",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default="",
                        max_digits=5,
                        null=True,
                        verbose_name="Height (cm)",
                    ),
                ),
                (
                    "blood_group",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=5,
                        null=True,
                        verbose_name="Blood Group",
                    ),
                ),
                ("purpose", models.TextField(blank=True, default="", null=True)),
                ("medical_issue", models.TextField(blank=True, default="", null=True)),
                ("medicine", models.TextField(blank=True, default="", null=True)),
                ("supplement", models.TextField(blank=True, default="", null=True)),
                ("wake_up_time", models.TimeField(blank=True, null=True)),
                ("sleep_time", models.TimeField(blank=True, null=True)),
                ("noon_nap", models.TimeField(blank=True, null=True)),
                ("family_history", models.TextField(blank=True, default="", null=True)),
                (
                    "food_preferences",
                    models.TextField(blank=True, default="", max_length=100, null=True),
                ),
                ("veg", models.BooleanField(default=False)),
                ("non_veg", models.BooleanField(default=False)),
                (
                    "food_taste",
                    models.TextField(blank=True, default="", max_length=100, null=True),
                ),
                ("food_allergy", models.TextField(blank=True, default="", null=True)),
                (
                    "water_glasses",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        verbose_name="Glasses of water",
                    ),
                ),
                (
                    "water_quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        null=True,
                        verbose_name="Water Quantity (L)",
                    ),
                ),
                (
                    "beverages",
                    models.TextField(
                        blank=True, default="", null=True, verbose_name="Beverages"
                    ),
                ),
                ("eat_outside_food", models.TextField(default="")),
                (
                    "consume_fruits_daily",
                    models.TextField(blank=True, default="", null=True),
                ),
                ("diabetes", models.BooleanField(default=False)),
                ("thyroid", models.BooleanField(default=False)),
                ("pcos", models.BooleanField(default=False)),
                ("hypertension", models.BooleanField(default=False)),
                ("heart_disease", models.BooleanField(default=False)),
                ("constipation", models.BooleanField(default=False)),
                ("diarrhea", models.BooleanField(default=False)),
                ("acidity", models.BooleanField(blank=True, default=False, null=True)),
                ("headache", models.BooleanField(blank=True, default=False, null=True)),
                (
                    "body_pain",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                ("regular_periods", models.BooleanField(default=False, null=True)),
                (
                    "irregular_period_details",
                    models.TextField(blank=True, default="", null=True),
                ),
                (
                    "has_children",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "number_of_children",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                ("delivery_type", models.TextField(blank=True, default="", null=True)),
                (
                    "oil_or_ghee_brand",
                    models.TextField(blank=True, default="", null=True),
                ),
                ("salt_used", models.TextField(blank=True, default="", null=True)),
                ("rice_used", models.TextField(blank=True, default="", null=True)),
                ("flour_used", models.TextField(blank=True, default="", null=True)),
                ("milk_used", models.TextField(blank=True, default="", null=True)),
                (
                    "sugar_used",
                    models.DecimalField(
                        blank=True, decimal_places=2, default=0, max_digits=5, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MealPlanFood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=0)),
                (
                    "timing",
                    models.CharField(
                        choices=[
                            ("after_bed", "After Bed"),
                            ("breakfast", "Breakfast"),
                            ("lunch", "Lunch"),
                            ("snacks", "Snacks"),
                            ("dinner", "Dinner"),
                            ("before_bed", "Before Bed"),
                            ("pre_workout", "Pre-Workout"),
                            ("post_workout", "Post-Workout"),
                        ],
                        default="",
                        max_length=20,
                        verbose_name="Timing",
                    ),
                ),
                ("time", models.TimeField(default="00:00:00")),
                (
                    "food",
                    models.ForeignKey(
                        default="default",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dietmaker.food",
                    ),
                ),
                (
                    "meal_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dietmaker.mealplan",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="mealplan",
            name="foods",
            field=models.ManyToManyField(
                through="dietmaker.MealPlanFood", to="dietmaker.food"
            ),
        ),
        migrations.CreateModel(
            name="Appointments",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_assigned", models.DateTimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "Appointment_description",
                    models.TextField(
                        blank=True,
                        default="",
                        null=True,
                        verbose_name="Appointment Description",
                    ),
                ),
                ("gym_time", models.TimeField(default="00:00:00")),
                ("sleep_time", models.TimeField(default="00:00:00")),
                ("wake_up_time", models.TimeField(default="00:00:00")),
                (
                    "body_composition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="appointments",
                        to="dietmaker.bodycomposition",
                    ),
                ),
                (
                    "meal_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="appointments",
                        to="dietmaker.mealplan",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dietmaker.patient",
                    ),
                ),
            ],
        ),
    ]
